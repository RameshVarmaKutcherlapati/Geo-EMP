/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.maersk.geography.smds.operations.msk;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Country Details */
@org.apache.avro.specific.AvroGenerated
public class country extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1742420520722695830L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"country\",\"namespace\":\"com.maersk.geography.smds.operations.msk\",\"doc\":\"Country Details\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"alternateCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"countryAlternateCode\",\"doc\":\"Country AlternateCode Details\",\"fields\":[{\"name\":\"codeType\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"}]}}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<country> ENCODER =
      new BinaryMessageEncoder<country>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<country> DECODER =
      new BinaryMessageDecoder<country>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<country> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<country> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<country> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<country>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this country to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a country from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a country instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static country fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence name;
  private java.lang.CharSequence type;
  private java.util.List<com.maersk.geography.smds.operations.msk.countryAlternateCode> alternateCodes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public country() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param type The new value for type
   * @param alternateCodes The new value for alternateCodes
   */
  public country(java.lang.CharSequence name, java.lang.CharSequence type, java.util.List<com.maersk.geography.smds.operations.msk.countryAlternateCode> alternateCodes) {
    this.name = name;
    this.type = type;
    this.alternateCodes = alternateCodes;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return type;
    case 2: return alternateCodes;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: type = (java.lang.CharSequence)value$; break;
    case 2: alternateCodes = (java.util.List<com.maersk.geography.smds.operations.msk.countryAlternateCode>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'alternateCodes' field.
   * @return The value of the 'alternateCodes' field.
   */
  public java.util.List<com.maersk.geography.smds.operations.msk.countryAlternateCode> getAlternateCodes() {
    return alternateCodes;
  }


  /**
   * Sets the value of the 'alternateCodes' field.
   * @param value the value to set.
   */
  public void setAlternateCodes(java.util.List<com.maersk.geography.smds.operations.msk.countryAlternateCode> value) {
    this.alternateCodes = value;
  }

  /**
   * Creates a new country RecordBuilder.
   * @return A new country RecordBuilder
   */
  public static com.maersk.geography.smds.operations.msk.country.Builder newBuilder() {
    return new com.maersk.geography.smds.operations.msk.country.Builder();
  }

  /**
   * Creates a new country RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new country RecordBuilder
   */
  public static com.maersk.geography.smds.operations.msk.country.Builder newBuilder(com.maersk.geography.smds.operations.msk.country.Builder other) {
    if (other == null) {
      return new com.maersk.geography.smds.operations.msk.country.Builder();
    } else {
      return new com.maersk.geography.smds.operations.msk.country.Builder(other);
    }
  }

  /**
   * Creates a new country RecordBuilder by copying an existing country instance.
   * @param other The existing instance to copy.
   * @return A new country RecordBuilder
   */
  public static com.maersk.geography.smds.operations.msk.country.Builder newBuilder(com.maersk.geography.smds.operations.msk.country other) {
    if (other == null) {
      return new com.maersk.geography.smds.operations.msk.country.Builder();
    } else {
      return new com.maersk.geography.smds.operations.msk.country.Builder(other);
    }
  }

  /**
   * RecordBuilder for country instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<country>
    implements org.apache.avro.data.RecordBuilder<country> {

    private java.lang.CharSequence name;
    private java.lang.CharSequence type;
    private java.util.List<com.maersk.geography.smds.operations.msk.countryAlternateCode> alternateCodes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.maersk.geography.smds.operations.msk.country.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.alternateCodes)) {
        this.alternateCodes = data().deepCopy(fields()[2].schema(), other.alternateCodes);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing country instance
     * @param other The existing instance to copy.
     */
    private Builder(com.maersk.geography.smds.operations.msk.country other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.alternateCodes)) {
        this.alternateCodes = data().deepCopy(fields()[2].schema(), other.alternateCodes);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.country.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.country.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.country.Builder setType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.country.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'alternateCodes' field.
      * @return The value.
      */
    public java.util.List<com.maersk.geography.smds.operations.msk.countryAlternateCode> getAlternateCodes() {
      return alternateCodes;
    }


    /**
      * Sets the value of the 'alternateCodes' field.
      * @param value The value of 'alternateCodes'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.country.Builder setAlternateCodes(java.util.List<com.maersk.geography.smds.operations.msk.countryAlternateCode> value) {
      validate(fields()[2], value);
      this.alternateCodes = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'alternateCodes' field has been set.
      * @return True if the 'alternateCodes' field has been set, false otherwise.
      */
    public boolean hasAlternateCodes() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'alternateCodes' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.country.Builder clearAlternateCodes() {
      alternateCodes = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public country build() {
      try {
        country record = new country();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.alternateCodes = fieldSetFlags()[2] ? this.alternateCodes : (java.util.List<com.maersk.geography.smds.operations.msk.countryAlternateCode>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<country>
    WRITER$ = (org.apache.avro.io.DatumWriter<country>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<country>
    READER$ = (org.apache.avro.io.DatumReader<country>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.name);

    out.writeString(this.type);

    if (this.alternateCodes == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.alternateCodes.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.maersk.geography.smds.operations.msk.countryAlternateCode e0: this.alternateCodes) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.alternateCodes = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.maersk.geography.smds.operations.msk.countryAlternateCode> a0 = this.alternateCodes;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.maersk.geography.smds.operations.msk.countryAlternateCode>((int)size0, SCHEMA$.getField("alternateCodes").schema().getTypes().get(1));
          this.alternateCodes = a0;
        } else a0.clear();
        SpecificData.Array<com.maersk.geography.smds.operations.msk.countryAlternateCode> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.maersk.geography.smds.operations.msk.countryAlternateCode>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.maersk.geography.smds.operations.msk.countryAlternateCode e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new com.maersk.geography.smds.operations.msk.countryAlternateCode();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 1:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.alternateCodes = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.maersk.geography.smds.operations.msk.countryAlternateCode> a0 = this.alternateCodes;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.maersk.geography.smds.operations.msk.countryAlternateCode>((int)size0, SCHEMA$.getField("alternateCodes").schema().getTypes().get(1));
              this.alternateCodes = a0;
            } else a0.clear();
            SpecificData.Array<com.maersk.geography.smds.operations.msk.countryAlternateCode> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.maersk.geography.smds.operations.msk.countryAlternateCode>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.maersk.geography.smds.operations.msk.countryAlternateCode e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new com.maersk.geography.smds.operations.msk.countryAlternateCode();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










