/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.maersk.geography.smds.operations.msk;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Geography Entity Information Which includes subcity,city,state,country,continent and their respective Alternate name and Code Information */
@org.apache.avro.specific.AvroGenerated
public class geography extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6229283423227808150L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"geography\",\"namespace\":\"com.maersk.geography.smds.operations.msk\",\"doc\":\"Geography Entity Information Which includes subcity,city,state,country,continent and their respective Alternate name and Code Information\",\"fields\":[{\"name\":\"geoId\",\"type\":\"string\"},{\"name\":\"geoType\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"validFrom\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"validTo\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"longitude\",\"type\":[\"null\",\"string\"]},{\"name\":\"latitude\",\"type\":[\"null\",\"string\"]},{\"name\":\"timeZone\",\"type\":[\"null\",\"string\"]},{\"name\":\"daylightSavingTime\",\"type\":[\"null\",\"string\"]},{\"name\":\"utcOffsetMinutes\",\"type\":[\"null\",\"string\"]},{\"name\":\"daylightSavingStart\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"daylightSavingEnd\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"daylightSavingShiftMinutes\",\"type\":[\"null\",\"string\"]},{\"name\":\"description\",\"type\":[\"null\",\"string\"]},{\"name\":\"workaroundReason\",\"type\":[\"null\",\"string\"]},{\"name\":\"restricted\",\"type\":[\"null\",\"string\"]},{\"name\":\"postalCodeMandatory\",\"type\":[\"null\",\"string\"]},{\"name\":\"stateProvienceMandatory\",\"type\":[\"null\",\"string\"]},{\"name\":\"dialingCode\",\"type\":[\"null\",\"string\"]},{\"name\":\"dialingCodeDescription\",\"type\":[\"null\",\"string\"]},{\"name\":\"portFlag\",\"type\":\"boolean\",\"default\":false},{\"name\":\"olsonTimezone\",\"type\":[\"null\",\"string\"]},{\"name\":\"bdaType\",\"type\":[\"null\",\"string\"]},{\"name\":\"hsudName\",\"type\":[\"null\",\"string\"]},{\"name\":\"alternateNames\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"alternateNames\",\"doc\":\"AlternateNames Details\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"]},{\"name\":\"status\",\"type\":\"string\"}]}}]},{\"name\":\"alternateCodes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"alternateCodes\",\"doc\":\"AlternateCodes Details\",\"fields\":[{\"name\":\"codeType\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"}]}}},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"country\",\"doc\":\"Country Details\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"alternateCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"countryAlternateCodes\",\"doc\":\"Country AlternateCode Details\",\"fields\":[{\"name\":\"codeType\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"}]}}]}]}}]},{\"name\":\"parent\",\"type\":{\"type\":\"record\",\"name\":\"parent\",\"doc\":\"Display Parent Information.For city Copenghagen  the parent is country Denmark\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"bdaType\",\"type\":[\"null\",\"string\"]},{\"name\":\"alternateCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"parentAlternateCode\",\"doc\":\"Parent AlternateCode details\",\"fields\":[{\"name\":\"codeType\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"}]}}]}]}},{\"name\":\"subCityParent\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"subCityParent\",\"doc\":\"Display Sub City Parent Information.For city Pune the sub cities are like viman nagar and so on\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"bdaType\",\"type\":[\"null\",\"string\"]},{\"name\":\"alternateCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"subCityParentAlternateCode\",\"doc\":\"SubCityParent AlternateCode details\",\"fields\":[{\"name\":\"codeType\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"}]}}]}]}}]},{\"name\":\"bda\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bda\",\"doc\":\"Display business defined area information. Example : North India,West & Central Asia and so on\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"bdaType\",\"type\":\"string\"},{\"name\":\"alternateCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bdaAlternateCode\",\"doc\":\"BDA AlternateCode details\",\"fields\":[{\"name\":\"codeType\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"}]}}]}]}}]},{\"name\":\"bdaLocations\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bdaLocation\",\"doc\":\"Display business defined area location and status information. Example : Liberty city\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"alternateCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bdaLocationAlternateCode\",\"doc\":\"BDALocation AlternateCode Details\",\"fields\":[{\"name\":\"codeType\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"}]}}]}]}}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<geography> ENCODER =
      new BinaryMessageEncoder<geography>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<geography> DECODER =
      new BinaryMessageDecoder<geography>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<geography> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<geography> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<geography> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<geography>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this geography to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a geography from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a geography instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static geography fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence geoId;
  private java.lang.CharSequence geoType;
  private java.lang.CharSequence name;
  private java.lang.CharSequence status;
  private java.time.Instant validFrom;
  private java.time.Instant validTo;
  private java.lang.CharSequence longitude;
  private java.lang.CharSequence latitude;
  private java.lang.CharSequence timeZone;
  private java.lang.CharSequence daylightSavingTime;
  private java.lang.CharSequence utcOffsetMinutes;
  private java.time.Instant daylightSavingStart;
  private java.time.Instant daylightSavingEnd;
  private java.lang.CharSequence daylightSavingShiftMinutes;
  private java.lang.CharSequence description;
  private java.lang.CharSequence workaroundReason;
  private java.lang.CharSequence restricted;
  private java.lang.CharSequence postalCodeMandatory;
  private java.lang.CharSequence stateProvienceMandatory;
  private java.lang.CharSequence dialingCode;
  private java.lang.CharSequence dialingCodeDescription;
  private boolean portFlag;
  private java.lang.CharSequence olsonTimezone;
  private java.lang.CharSequence bdaType;
  private java.lang.CharSequence hsudName;
  private java.util.List<com.maersk.geography.smds.operations.msk.alternateNames> alternateNames;
  private java.util.List<com.maersk.geography.smds.operations.msk.alternateCodes> alternateCodes;
  private java.util.List<com.maersk.geography.smds.operations.msk.country> country;
  private com.maersk.geography.smds.operations.msk.parent parent;
  private java.util.List<com.maersk.geography.smds.operations.msk.subCityParent> subCityParent;
  private java.util.List<com.maersk.geography.smds.operations.msk.bda> bda;
  private java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation> bdaLocations;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public geography() {}

  /**
   * All-args constructor.
   * @param geoId The new value for geoId
   * @param geoType The new value for geoType
   * @param name The new value for name
   * @param status The new value for status
   * @param validFrom The new value for validFrom
   * @param validTo The new value for validTo
   * @param longitude The new value for longitude
   * @param latitude The new value for latitude
   * @param timeZone The new value for timeZone
   * @param daylightSavingTime The new value for daylightSavingTime
   * @param utcOffsetMinutes The new value for utcOffsetMinutes
   * @param daylightSavingStart The new value for daylightSavingStart
   * @param daylightSavingEnd The new value for daylightSavingEnd
   * @param daylightSavingShiftMinutes The new value for daylightSavingShiftMinutes
   * @param description The new value for description
   * @param workaroundReason The new value for workaroundReason
   * @param restricted The new value for restricted
   * @param postalCodeMandatory The new value for postalCodeMandatory
   * @param stateProvienceMandatory The new value for stateProvienceMandatory
   * @param dialingCode The new value for dialingCode
   * @param dialingCodeDescription The new value for dialingCodeDescription
   * @param portFlag The new value for portFlag
   * @param olsonTimezone The new value for olsonTimezone
   * @param bdaType The new value for bdaType
   * @param hsudName The new value for hsudName
   * @param alternateNames The new value for alternateNames
   * @param alternateCodes The new value for alternateCodes
   * @param country The new value for country
   * @param parent The new value for parent
   * @param subCityParent The new value for subCityParent
   * @param bda The new value for bda
   * @param bdaLocations The new value for bdaLocations
   */
  public geography(java.lang.CharSequence geoId, java.lang.CharSequence geoType, java.lang.CharSequence name, java.lang.CharSequence status, java.time.Instant validFrom, java.time.Instant validTo, java.lang.CharSequence longitude, java.lang.CharSequence latitude, java.lang.CharSequence timeZone, java.lang.CharSequence daylightSavingTime, java.lang.CharSequence utcOffsetMinutes, java.time.Instant daylightSavingStart, java.time.Instant daylightSavingEnd, java.lang.CharSequence daylightSavingShiftMinutes, java.lang.CharSequence description, java.lang.CharSequence workaroundReason, java.lang.CharSequence restricted, java.lang.CharSequence postalCodeMandatory, java.lang.CharSequence stateProvienceMandatory, java.lang.CharSequence dialingCode, java.lang.CharSequence dialingCodeDescription, java.lang.Boolean portFlag, java.lang.CharSequence olsonTimezone, java.lang.CharSequence bdaType, java.lang.CharSequence hsudName, java.util.List<com.maersk.geography.smds.operations.msk.alternateNames> alternateNames, java.util.List<com.maersk.geography.smds.operations.msk.alternateCodes> alternateCodes, java.util.List<com.maersk.geography.smds.operations.msk.country> country, com.maersk.geography.smds.operations.msk.parent parent, java.util.List<com.maersk.geography.smds.operations.msk.subCityParent> subCityParent, java.util.List<com.maersk.geography.smds.operations.msk.bda> bda, java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation> bdaLocations) {
    this.geoId = geoId;
    this.geoType = geoType;
    this.name = name;
    this.status = status;
    this.validFrom = validFrom.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.validTo = validTo.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.longitude = longitude;
    this.latitude = latitude;
    this.timeZone = timeZone;
    this.daylightSavingTime = daylightSavingTime;
    this.utcOffsetMinutes = utcOffsetMinutes;
    this.daylightSavingStart = daylightSavingStart;
    this.daylightSavingEnd = daylightSavingEnd;
    this.daylightSavingShiftMinutes = daylightSavingShiftMinutes;
    this.description = description;
    this.workaroundReason = workaroundReason;
    this.restricted = restricted;
    this.postalCodeMandatory = postalCodeMandatory;
    this.stateProvienceMandatory = stateProvienceMandatory;
    this.dialingCode = dialingCode;
    this.dialingCodeDescription = dialingCodeDescription;
    this.portFlag = portFlag;
    this.olsonTimezone = olsonTimezone;
    this.bdaType = bdaType;
    this.hsudName = hsudName;
    this.alternateNames = alternateNames;
    this.alternateCodes = alternateCodes;
    this.country = country;
    this.parent = parent;
    this.subCityParent = subCityParent;
    this.bda = bda;
    this.bdaLocations = bdaLocations;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return geoId;
    case 1: return geoType;
    case 2: return name;
    case 3: return status;
    case 4: return validFrom;
    case 5: return validTo;
    case 6: return longitude;
    case 7: return latitude;
    case 8: return timeZone;
    case 9: return daylightSavingTime;
    case 10: return utcOffsetMinutes;
    case 11: return daylightSavingStart;
    case 12: return daylightSavingEnd;
    case 13: return daylightSavingShiftMinutes;
    case 14: return description;
    case 15: return workaroundReason;
    case 16: return restricted;
    case 17: return postalCodeMandatory;
    case 18: return stateProvienceMandatory;
    case 19: return dialingCode;
    case 20: return dialingCodeDescription;
    case 21: return portFlag;
    case 22: return olsonTimezone;
    case 23: return bdaType;
    case 24: return hsudName;
    case 25: return alternateNames;
    case 26: return alternateCodes;
    case 27: return country;
    case 28: return parent;
    case 29: return subCityParent;
    case 30: return bda;
    case 31: return bdaLocations;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: geoId = (java.lang.CharSequence)value$; break;
    case 1: geoType = (java.lang.CharSequence)value$; break;
    case 2: name = (java.lang.CharSequence)value$; break;
    case 3: status = (java.lang.CharSequence)value$; break;
    case 4: validFrom = (java.time.Instant)value$; break;
    case 5: validTo = (java.time.Instant)value$; break;
    case 6: longitude = (java.lang.CharSequence)value$; break;
    case 7: latitude = (java.lang.CharSequence)value$; break;
    case 8: timeZone = (java.lang.CharSequence)value$; break;
    case 9: daylightSavingTime = (java.lang.CharSequence)value$; break;
    case 10: utcOffsetMinutes = (java.lang.CharSequence)value$; break;
    case 11: daylightSavingStart = (java.time.Instant)value$; break;
    case 12: daylightSavingEnd = (java.time.Instant)value$; break;
    case 13: daylightSavingShiftMinutes = (java.lang.CharSequence)value$; break;
    case 14: description = (java.lang.CharSequence)value$; break;
    case 15: workaroundReason = (java.lang.CharSequence)value$; break;
    case 16: restricted = (java.lang.CharSequence)value$; break;
    case 17: postalCodeMandatory = (java.lang.CharSequence)value$; break;
    case 18: stateProvienceMandatory = (java.lang.CharSequence)value$; break;
    case 19: dialingCode = (java.lang.CharSequence)value$; break;
    case 20: dialingCodeDescription = (java.lang.CharSequence)value$; break;
    case 21: portFlag = (java.lang.Boolean)value$; break;
    case 22: olsonTimezone = (java.lang.CharSequence)value$; break;
    case 23: bdaType = (java.lang.CharSequence)value$; break;
    case 24: hsudName = (java.lang.CharSequence)value$; break;
    case 25: alternateNames = (java.util.List<com.maersk.geography.smds.operations.msk.alternateNames>)value$; break;
    case 26: alternateCodes = (java.util.List<com.maersk.geography.smds.operations.msk.alternateCodes>)value$; break;
    case 27: country = (java.util.List<com.maersk.geography.smds.operations.msk.country>)value$; break;
    case 28: parent = (com.maersk.geography.smds.operations.msk.parent)value$; break;
    case 29: subCityParent = (java.util.List<com.maersk.geography.smds.operations.msk.subCityParent>)value$; break;
    case 30: bda = (java.util.List<com.maersk.geography.smds.operations.msk.bda>)value$; break;
    case 31: bdaLocations = (java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'geoId' field.
   * @return The value of the 'geoId' field.
   */
  public java.lang.CharSequence getGeoId() {
    return geoId;
  }


  /**
   * Sets the value of the 'geoId' field.
   * @param value the value to set.
   */
  public void setGeoId(java.lang.CharSequence value) {
    this.geoId = value;
  }

  /**
   * Gets the value of the 'geoType' field.
   * @return The value of the 'geoType' field.
   */
  public java.lang.CharSequence getGeoType() {
    return geoType;
  }


  /**
   * Sets the value of the 'geoType' field.
   * @param value the value to set.
   */
  public void setGeoType(java.lang.CharSequence value) {
    this.geoType = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'validFrom' field.
   * @return The value of the 'validFrom' field.
   */
  public java.time.Instant getValidFrom() {
    return validFrom;
  }


  /**
   * Sets the value of the 'validFrom' field.
   * @param value the value to set.
   */
  public void setValidFrom(java.time.Instant value) {
    this.validFrom = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'validTo' field.
   * @return The value of the 'validTo' field.
   */
  public java.time.Instant getValidTo() {
    return validTo;
  }


  /**
   * Sets the value of the 'validTo' field.
   * @param value the value to set.
   */
  public void setValidTo(java.time.Instant value) {
    this.validTo = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.CharSequence getLongitude() {
    return longitude;
  }


  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.CharSequence value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.CharSequence getLatitude() {
    return latitude;
  }


  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.CharSequence value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'timeZone' field.
   * @return The value of the 'timeZone' field.
   */
  public java.lang.CharSequence getTimeZone() {
    return timeZone;
  }


  /**
   * Sets the value of the 'timeZone' field.
   * @param value the value to set.
   */
  public void setTimeZone(java.lang.CharSequence value) {
    this.timeZone = value;
  }

  /**
   * Gets the value of the 'daylightSavingTime' field.
   * @return The value of the 'daylightSavingTime' field.
   */
  public java.lang.CharSequence getDaylightSavingTime() {
    return daylightSavingTime;
  }


  /**
   * Sets the value of the 'daylightSavingTime' field.
   * @param value the value to set.
   */
  public void setDaylightSavingTime(java.lang.CharSequence value) {
    this.daylightSavingTime = value;
  }

  /**
   * Gets the value of the 'utcOffsetMinutes' field.
   * @return The value of the 'utcOffsetMinutes' field.
   */
  public java.lang.CharSequence getUtcOffsetMinutes() {
    return utcOffsetMinutes;
  }


  /**
   * Sets the value of the 'utcOffsetMinutes' field.
   * @param value the value to set.
   */
  public void setUtcOffsetMinutes(java.lang.CharSequence value) {
    this.utcOffsetMinutes = value;
  }

  /**
   * Gets the value of the 'daylightSavingStart' field.
   * @return The value of the 'daylightSavingStart' field.
   */
  public java.time.Instant getDaylightSavingStart() {
    return daylightSavingStart;
  }


  /**
   * Sets the value of the 'daylightSavingStart' field.
   * @param value the value to set.
   */
  public void setDaylightSavingStart(java.time.Instant value) {
    this.daylightSavingStart = value;
  }

  /**
   * Gets the value of the 'daylightSavingEnd' field.
   * @return The value of the 'daylightSavingEnd' field.
   */
  public java.time.Instant getDaylightSavingEnd() {
    return daylightSavingEnd;
  }


  /**
   * Sets the value of the 'daylightSavingEnd' field.
   * @param value the value to set.
   */
  public void setDaylightSavingEnd(java.time.Instant value) {
    this.daylightSavingEnd = value;
  }

  /**
   * Gets the value of the 'daylightSavingShiftMinutes' field.
   * @return The value of the 'daylightSavingShiftMinutes' field.
   */
  public java.lang.CharSequence getDaylightSavingShiftMinutes() {
    return daylightSavingShiftMinutes;
  }


  /**
   * Sets the value of the 'daylightSavingShiftMinutes' field.
   * @param value the value to set.
   */
  public void setDaylightSavingShiftMinutes(java.lang.CharSequence value) {
    this.daylightSavingShiftMinutes = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'workaroundReason' field.
   * @return The value of the 'workaroundReason' field.
   */
  public java.lang.CharSequence getWorkaroundReason() {
    return workaroundReason;
  }


  /**
   * Sets the value of the 'workaroundReason' field.
   * @param value the value to set.
   */
  public void setWorkaroundReason(java.lang.CharSequence value) {
    this.workaroundReason = value;
  }

  /**
   * Gets the value of the 'restricted' field.
   * @return The value of the 'restricted' field.
   */
  public java.lang.CharSequence getRestricted() {
    return restricted;
  }


  /**
   * Sets the value of the 'restricted' field.
   * @param value the value to set.
   */
  public void setRestricted(java.lang.CharSequence value) {
    this.restricted = value;
  }

  /**
   * Gets the value of the 'postalCodeMandatory' field.
   * @return The value of the 'postalCodeMandatory' field.
   */
  public java.lang.CharSequence getPostalCodeMandatory() {
    return postalCodeMandatory;
  }


  /**
   * Sets the value of the 'postalCodeMandatory' field.
   * @param value the value to set.
   */
  public void setPostalCodeMandatory(java.lang.CharSequence value) {
    this.postalCodeMandatory = value;
  }

  /**
   * Gets the value of the 'stateProvienceMandatory' field.
   * @return The value of the 'stateProvienceMandatory' field.
   */
  public java.lang.CharSequence getStateProvienceMandatory() {
    return stateProvienceMandatory;
  }


  /**
   * Sets the value of the 'stateProvienceMandatory' field.
   * @param value the value to set.
   */
  public void setStateProvienceMandatory(java.lang.CharSequence value) {
    this.stateProvienceMandatory = value;
  }

  /**
   * Gets the value of the 'dialingCode' field.
   * @return The value of the 'dialingCode' field.
   */
  public java.lang.CharSequence getDialingCode() {
    return dialingCode;
  }


  /**
   * Sets the value of the 'dialingCode' field.
   * @param value the value to set.
   */
  public void setDialingCode(java.lang.CharSequence value) {
    this.dialingCode = value;
  }

  /**
   * Gets the value of the 'dialingCodeDescription' field.
   * @return The value of the 'dialingCodeDescription' field.
   */
  public java.lang.CharSequence getDialingCodeDescription() {
    return dialingCodeDescription;
  }


  /**
   * Sets the value of the 'dialingCodeDescription' field.
   * @param value the value to set.
   */
  public void setDialingCodeDescription(java.lang.CharSequence value) {
    this.dialingCodeDescription = value;
  }

  /**
   * Gets the value of the 'portFlag' field.
   * @return The value of the 'portFlag' field.
   */
  public boolean getPortFlag() {
    return portFlag;
  }


  /**
   * Sets the value of the 'portFlag' field.
   * @param value the value to set.
   */
  public void setPortFlag(boolean value) {
    this.portFlag = value;
  }

  /**
   * Gets the value of the 'olsonTimezone' field.
   * @return The value of the 'olsonTimezone' field.
   */
  public java.lang.CharSequence getOlsonTimezone() {
    return olsonTimezone;
  }


  /**
   * Sets the value of the 'olsonTimezone' field.
   * @param value the value to set.
   */
  public void setOlsonTimezone(java.lang.CharSequence value) {
    this.olsonTimezone = value;
  }

  /**
   * Gets the value of the 'bdaType' field.
   * @return The value of the 'bdaType' field.
   */
  public java.lang.CharSequence getBdaType() {
    return bdaType;
  }


  /**
   * Sets the value of the 'bdaType' field.
   * @param value the value to set.
   */
  public void setBdaType(java.lang.CharSequence value) {
    this.bdaType = value;
  }

  /**
   * Gets the value of the 'hsudName' field.
   * @return The value of the 'hsudName' field.
   */
  public java.lang.CharSequence getHsudName() {
    return hsudName;
  }


  /**
   * Sets the value of the 'hsudName' field.
   * @param value the value to set.
   */
  public void setHsudName(java.lang.CharSequence value) {
    this.hsudName = value;
  }

  /**
   * Gets the value of the 'alternateNames' field.
   * @return The value of the 'alternateNames' field.
   */
  public java.util.List<com.maersk.geography.smds.operations.msk.alternateNames> getAlternateNames() {
    return alternateNames;
  }


  /**
   * Sets the value of the 'alternateNames' field.
   * @param value the value to set.
   */
  public void setAlternateNames(java.util.List<com.maersk.geography.smds.operations.msk.alternateNames> value) {
    this.alternateNames = value;
  }

  /**
   * Gets the value of the 'alternateCodes' field.
   * @return The value of the 'alternateCodes' field.
   */
  public java.util.List<com.maersk.geography.smds.operations.msk.alternateCodes> getAlternateCodes() {
    return alternateCodes;
  }


  /**
   * Sets the value of the 'alternateCodes' field.
   * @param value the value to set.
   */
  public void setAlternateCodes(java.util.List<com.maersk.geography.smds.operations.msk.alternateCodes> value) {
    this.alternateCodes = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.util.List<com.maersk.geography.smds.operations.msk.country> getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.util.List<com.maersk.geography.smds.operations.msk.country> value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'parent' field.
   * @return The value of the 'parent' field.
   */
  public com.maersk.geography.smds.operations.msk.parent getParent() {
    return parent;
  }


  /**
   * Sets the value of the 'parent' field.
   * @param value the value to set.
   */
  public void setParent(com.maersk.geography.smds.operations.msk.parent value) {
    this.parent = value;
  }

  /**
   * Gets the value of the 'subCityParent' field.
   * @return The value of the 'subCityParent' field.
   */
  public java.util.List<com.maersk.geography.smds.operations.msk.subCityParent> getSubCityParent() {
    return subCityParent;
  }


  /**
   * Sets the value of the 'subCityParent' field.
   * @param value the value to set.
   */
  public void setSubCityParent(java.util.List<com.maersk.geography.smds.operations.msk.subCityParent> value) {
    this.subCityParent = value;
  }

  /**
   * Gets the value of the 'bda' field.
   * @return The value of the 'bda' field.
   */
  public java.util.List<com.maersk.geography.smds.operations.msk.bda> getBda() {
    return bda;
  }


  /**
   * Sets the value of the 'bda' field.
   * @param value the value to set.
   */
  public void setBda(java.util.List<com.maersk.geography.smds.operations.msk.bda> value) {
    this.bda = value;
  }

  /**
   * Gets the value of the 'bdaLocations' field.
   * @return The value of the 'bdaLocations' field.
   */
  public java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation> getBdaLocations() {
    return bdaLocations;
  }


  /**
   * Sets the value of the 'bdaLocations' field.
   * @param value the value to set.
   */
  public void setBdaLocations(java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation> value) {
    this.bdaLocations = value;
  }

  /**
   * Creates a new geography RecordBuilder.
   * @return A new geography RecordBuilder
   */
  public static com.maersk.geography.smds.operations.msk.geography.Builder newBuilder() {
    return new com.maersk.geography.smds.operations.msk.geography.Builder();
  }

  /**
   * Creates a new geography RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new geography RecordBuilder
   */
  public static com.maersk.geography.smds.operations.msk.geography.Builder newBuilder(com.maersk.geography.smds.operations.msk.geography.Builder other) {
    if (other == null) {
      return new com.maersk.geography.smds.operations.msk.geography.Builder();
    } else {
      return new com.maersk.geography.smds.operations.msk.geography.Builder(other);
    }
  }

  /**
   * Creates a new geography RecordBuilder by copying an existing geography instance.
   * @param other The existing instance to copy.
   * @return A new geography RecordBuilder
   */
  public static com.maersk.geography.smds.operations.msk.geography.Builder newBuilder(com.maersk.geography.smds.operations.msk.geography other) {
    if (other == null) {
      return new com.maersk.geography.smds.operations.msk.geography.Builder();
    } else {
      return new com.maersk.geography.smds.operations.msk.geography.Builder(other);
    }
  }

  /**
   * RecordBuilder for geography instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<geography>
    implements org.apache.avro.data.RecordBuilder<geography> {

    private java.lang.CharSequence geoId;
    private java.lang.CharSequence geoType;
    private java.lang.CharSequence name;
    private java.lang.CharSequence status;
    private java.time.Instant validFrom;
    private java.time.Instant validTo;
    private java.lang.CharSequence longitude;
    private java.lang.CharSequence latitude;
    private java.lang.CharSequence timeZone;
    private java.lang.CharSequence daylightSavingTime;
    private java.lang.CharSequence utcOffsetMinutes;
    private java.time.Instant daylightSavingStart;
    private java.time.Instant daylightSavingEnd;
    private java.lang.CharSequence daylightSavingShiftMinutes;
    private java.lang.CharSequence description;
    private java.lang.CharSequence workaroundReason;
    private java.lang.CharSequence restricted;
    private java.lang.CharSequence postalCodeMandatory;
    private java.lang.CharSequence stateProvienceMandatory;
    private java.lang.CharSequence dialingCode;
    private java.lang.CharSequence dialingCodeDescription;
    private boolean portFlag;
    private java.lang.CharSequence olsonTimezone;
    private java.lang.CharSequence bdaType;
    private java.lang.CharSequence hsudName;
    private java.util.List<com.maersk.geography.smds.operations.msk.alternateNames> alternateNames;
    private java.util.List<com.maersk.geography.smds.operations.msk.alternateCodes> alternateCodes;
    private java.util.List<com.maersk.geography.smds.operations.msk.country> country;
    private com.maersk.geography.smds.operations.msk.parent parent;
    private com.maersk.geography.smds.operations.msk.parent.Builder parentBuilder;
    private java.util.List<com.maersk.geography.smds.operations.msk.subCityParent> subCityParent;
    private java.util.List<com.maersk.geography.smds.operations.msk.bda> bda;
    private java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation> bdaLocations;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.maersk.geography.smds.operations.msk.geography.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.geoId)) {
        this.geoId = data().deepCopy(fields()[0].schema(), other.geoId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.geoType)) {
        this.geoType = data().deepCopy(fields()[1].schema(), other.geoType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.validFrom)) {
        this.validFrom = data().deepCopy(fields()[4].schema(), other.validFrom);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.validTo)) {
        this.validTo = data().deepCopy(fields()[5].schema(), other.validTo);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.longitude)) {
        this.longitude = data().deepCopy(fields()[6].schema(), other.longitude);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.latitude)) {
        this.latitude = data().deepCopy(fields()[7].schema(), other.latitude);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.timeZone)) {
        this.timeZone = data().deepCopy(fields()[8].schema(), other.timeZone);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.daylightSavingTime)) {
        this.daylightSavingTime = data().deepCopy(fields()[9].schema(), other.daylightSavingTime);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.utcOffsetMinutes)) {
        this.utcOffsetMinutes = data().deepCopy(fields()[10].schema(), other.utcOffsetMinutes);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.daylightSavingStart)) {
        this.daylightSavingStart = data().deepCopy(fields()[11].schema(), other.daylightSavingStart);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.daylightSavingEnd)) {
        this.daylightSavingEnd = data().deepCopy(fields()[12].schema(), other.daylightSavingEnd);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.daylightSavingShiftMinutes)) {
        this.daylightSavingShiftMinutes = data().deepCopy(fields()[13].schema(), other.daylightSavingShiftMinutes);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.description)) {
        this.description = data().deepCopy(fields()[14].schema(), other.description);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.workaroundReason)) {
        this.workaroundReason = data().deepCopy(fields()[15].schema(), other.workaroundReason);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.restricted)) {
        this.restricted = data().deepCopy(fields()[16].schema(), other.restricted);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.postalCodeMandatory)) {
        this.postalCodeMandatory = data().deepCopy(fields()[17].schema(), other.postalCodeMandatory);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.stateProvienceMandatory)) {
        this.stateProvienceMandatory = data().deepCopy(fields()[18].schema(), other.stateProvienceMandatory);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.dialingCode)) {
        this.dialingCode = data().deepCopy(fields()[19].schema(), other.dialingCode);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.dialingCodeDescription)) {
        this.dialingCodeDescription = data().deepCopy(fields()[20].schema(), other.dialingCodeDescription);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.portFlag)) {
        this.portFlag = data().deepCopy(fields()[21].schema(), other.portFlag);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.olsonTimezone)) {
        this.olsonTimezone = data().deepCopy(fields()[22].schema(), other.olsonTimezone);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.bdaType)) {
        this.bdaType = data().deepCopy(fields()[23].schema(), other.bdaType);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.hsudName)) {
        this.hsudName = data().deepCopy(fields()[24].schema(), other.hsudName);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.alternateNames)) {
        this.alternateNames = data().deepCopy(fields()[25].schema(), other.alternateNames);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.alternateCodes)) {
        this.alternateCodes = data().deepCopy(fields()[26].schema(), other.alternateCodes);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.country)) {
        this.country = data().deepCopy(fields()[27].schema(), other.country);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.parent)) {
        this.parent = data().deepCopy(fields()[28].schema(), other.parent);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (other.hasParentBuilder()) {
        this.parentBuilder = com.maersk.geography.smds.operations.msk.parent.newBuilder(other.getParentBuilder());
      }
      if (isValidValue(fields()[29], other.subCityParent)) {
        this.subCityParent = data().deepCopy(fields()[29].schema(), other.subCityParent);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
      if (isValidValue(fields()[30], other.bda)) {
        this.bda = data().deepCopy(fields()[30].schema(), other.bda);
        fieldSetFlags()[30] = other.fieldSetFlags()[30];
      }
      if (isValidValue(fields()[31], other.bdaLocations)) {
        this.bdaLocations = data().deepCopy(fields()[31].schema(), other.bdaLocations);
        fieldSetFlags()[31] = other.fieldSetFlags()[31];
      }
    }

    /**
     * Creates a Builder by copying an existing geography instance
     * @param other The existing instance to copy.
     */
    private Builder(com.maersk.geography.smds.operations.msk.geography other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.geoId)) {
        this.geoId = data().deepCopy(fields()[0].schema(), other.geoId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.geoType)) {
        this.geoType = data().deepCopy(fields()[1].schema(), other.geoType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.validFrom)) {
        this.validFrom = data().deepCopy(fields()[4].schema(), other.validFrom);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.validTo)) {
        this.validTo = data().deepCopy(fields()[5].schema(), other.validTo);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.longitude)) {
        this.longitude = data().deepCopy(fields()[6].schema(), other.longitude);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.latitude)) {
        this.latitude = data().deepCopy(fields()[7].schema(), other.latitude);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.timeZone)) {
        this.timeZone = data().deepCopy(fields()[8].schema(), other.timeZone);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.daylightSavingTime)) {
        this.daylightSavingTime = data().deepCopy(fields()[9].schema(), other.daylightSavingTime);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.utcOffsetMinutes)) {
        this.utcOffsetMinutes = data().deepCopy(fields()[10].schema(), other.utcOffsetMinutes);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.daylightSavingStart)) {
        this.daylightSavingStart = data().deepCopy(fields()[11].schema(), other.daylightSavingStart);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.daylightSavingEnd)) {
        this.daylightSavingEnd = data().deepCopy(fields()[12].schema(), other.daylightSavingEnd);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.daylightSavingShiftMinutes)) {
        this.daylightSavingShiftMinutes = data().deepCopy(fields()[13].schema(), other.daylightSavingShiftMinutes);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.description)) {
        this.description = data().deepCopy(fields()[14].schema(), other.description);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.workaroundReason)) {
        this.workaroundReason = data().deepCopy(fields()[15].schema(), other.workaroundReason);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.restricted)) {
        this.restricted = data().deepCopy(fields()[16].schema(), other.restricted);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.postalCodeMandatory)) {
        this.postalCodeMandatory = data().deepCopy(fields()[17].schema(), other.postalCodeMandatory);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.stateProvienceMandatory)) {
        this.stateProvienceMandatory = data().deepCopy(fields()[18].schema(), other.stateProvienceMandatory);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.dialingCode)) {
        this.dialingCode = data().deepCopy(fields()[19].schema(), other.dialingCode);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.dialingCodeDescription)) {
        this.dialingCodeDescription = data().deepCopy(fields()[20].schema(), other.dialingCodeDescription);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.portFlag)) {
        this.portFlag = data().deepCopy(fields()[21].schema(), other.portFlag);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.olsonTimezone)) {
        this.olsonTimezone = data().deepCopy(fields()[22].schema(), other.olsonTimezone);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.bdaType)) {
        this.bdaType = data().deepCopy(fields()[23].schema(), other.bdaType);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.hsudName)) {
        this.hsudName = data().deepCopy(fields()[24].schema(), other.hsudName);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.alternateNames)) {
        this.alternateNames = data().deepCopy(fields()[25].schema(), other.alternateNames);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.alternateCodes)) {
        this.alternateCodes = data().deepCopy(fields()[26].schema(), other.alternateCodes);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.country)) {
        this.country = data().deepCopy(fields()[27].schema(), other.country);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.parent)) {
        this.parent = data().deepCopy(fields()[28].schema(), other.parent);
        fieldSetFlags()[28] = true;
      }
      this.parentBuilder = null;
      if (isValidValue(fields()[29], other.subCityParent)) {
        this.subCityParent = data().deepCopy(fields()[29].schema(), other.subCityParent);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.bda)) {
        this.bda = data().deepCopy(fields()[30].schema(), other.bda);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.bdaLocations)) {
        this.bdaLocations = data().deepCopy(fields()[31].schema(), other.bdaLocations);
        fieldSetFlags()[31] = true;
      }
    }

    /**
      * Gets the value of the 'geoId' field.
      * @return The value.
      */
    public java.lang.CharSequence getGeoId() {
      return geoId;
    }


    /**
      * Sets the value of the 'geoId' field.
      * @param value The value of 'geoId'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setGeoId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.geoId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'geoId' field has been set.
      * @return True if the 'geoId' field has been set, false otherwise.
      */
    public boolean hasGeoId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'geoId' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearGeoId() {
      geoId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'geoType' field.
      * @return The value.
      */
    public java.lang.CharSequence getGeoType() {
      return geoType;
    }


    /**
      * Sets the value of the 'geoType' field.
      * @param value The value of 'geoType'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setGeoType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.geoType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'geoType' field has been set.
      * @return True if the 'geoType' field has been set, false otherwise.
      */
    public boolean hasGeoType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'geoType' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearGeoType() {
      geoType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.status = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearStatus() {
      status = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'validFrom' field.
      * @return The value.
      */
    public java.time.Instant getValidFrom() {
      return validFrom;
    }


    /**
      * Sets the value of the 'validFrom' field.
      * @param value The value of 'validFrom'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setValidFrom(java.time.Instant value) {
      validate(fields()[4], value);
      this.validFrom = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'validFrom' field has been set.
      * @return True if the 'validFrom' field has been set, false otherwise.
      */
    public boolean hasValidFrom() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'validFrom' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearValidFrom() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'validTo' field.
      * @return The value.
      */
    public java.time.Instant getValidTo() {
      return validTo;
    }


    /**
      * Sets the value of the 'validTo' field.
      * @param value The value of 'validTo'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setValidTo(java.time.Instant value) {
      validate(fields()[5], value);
      this.validTo = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'validTo' field has been set.
      * @return True if the 'validTo' field has been set, false otherwise.
      */
    public boolean hasValidTo() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'validTo' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearValidTo() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.CharSequence getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setLongitude(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.longitude = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearLongitude() {
      longitude = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.CharSequence getLatitude() {
      return latitude;
    }


    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setLatitude(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.latitude = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearLatitude() {
      latitude = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeZone' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimeZone() {
      return timeZone;
    }


    /**
      * Sets the value of the 'timeZone' field.
      * @param value The value of 'timeZone'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setTimeZone(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.timeZone = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'timeZone' field has been set.
      * @return True if the 'timeZone' field has been set, false otherwise.
      */
    public boolean hasTimeZone() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'timeZone' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearTimeZone() {
      timeZone = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'daylightSavingTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getDaylightSavingTime() {
      return daylightSavingTime;
    }


    /**
      * Sets the value of the 'daylightSavingTime' field.
      * @param value The value of 'daylightSavingTime'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setDaylightSavingTime(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.daylightSavingTime = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'daylightSavingTime' field has been set.
      * @return True if the 'daylightSavingTime' field has been set, false otherwise.
      */
    public boolean hasDaylightSavingTime() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'daylightSavingTime' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearDaylightSavingTime() {
      daylightSavingTime = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'utcOffsetMinutes' field.
      * @return The value.
      */
    public java.lang.CharSequence getUtcOffsetMinutes() {
      return utcOffsetMinutes;
    }


    /**
      * Sets the value of the 'utcOffsetMinutes' field.
      * @param value The value of 'utcOffsetMinutes'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setUtcOffsetMinutes(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.utcOffsetMinutes = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'utcOffsetMinutes' field has been set.
      * @return True if the 'utcOffsetMinutes' field has been set, false otherwise.
      */
    public boolean hasUtcOffsetMinutes() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'utcOffsetMinutes' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearUtcOffsetMinutes() {
      utcOffsetMinutes = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'daylightSavingStart' field.
      * @return The value.
      */
    public java.time.Instant getDaylightSavingStart() {
      return daylightSavingStart;
    }


    /**
      * Sets the value of the 'daylightSavingStart' field.
      * @param value The value of 'daylightSavingStart'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setDaylightSavingStart(java.time.Instant value) {
      validate(fields()[11], value);
      this.daylightSavingStart = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'daylightSavingStart' field has been set.
      * @return True if the 'daylightSavingStart' field has been set, false otherwise.
      */
    public boolean hasDaylightSavingStart() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'daylightSavingStart' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearDaylightSavingStart() {
      daylightSavingStart = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'daylightSavingEnd' field.
      * @return The value.
      */
    public java.time.Instant getDaylightSavingEnd() {
      return daylightSavingEnd;
    }


    /**
      * Sets the value of the 'daylightSavingEnd' field.
      * @param value The value of 'daylightSavingEnd'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setDaylightSavingEnd(java.time.Instant value) {
      validate(fields()[12], value);
      this.daylightSavingEnd = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'daylightSavingEnd' field has been set.
      * @return True if the 'daylightSavingEnd' field has been set, false otherwise.
      */
    public boolean hasDaylightSavingEnd() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'daylightSavingEnd' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearDaylightSavingEnd() {
      daylightSavingEnd = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'daylightSavingShiftMinutes' field.
      * @return The value.
      */
    public java.lang.CharSequence getDaylightSavingShiftMinutes() {
      return daylightSavingShiftMinutes;
    }


    /**
      * Sets the value of the 'daylightSavingShiftMinutes' field.
      * @param value The value of 'daylightSavingShiftMinutes'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setDaylightSavingShiftMinutes(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.daylightSavingShiftMinutes = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'daylightSavingShiftMinutes' field has been set.
      * @return True if the 'daylightSavingShiftMinutes' field has been set, false otherwise.
      */
    public boolean hasDaylightSavingShiftMinutes() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'daylightSavingShiftMinutes' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearDaylightSavingShiftMinutes() {
      daylightSavingShiftMinutes = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.description = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearDescription() {
      description = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'workaroundReason' field.
      * @return The value.
      */
    public java.lang.CharSequence getWorkaroundReason() {
      return workaroundReason;
    }


    /**
      * Sets the value of the 'workaroundReason' field.
      * @param value The value of 'workaroundReason'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setWorkaroundReason(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.workaroundReason = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'workaroundReason' field has been set.
      * @return True if the 'workaroundReason' field has been set, false otherwise.
      */
    public boolean hasWorkaroundReason() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'workaroundReason' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearWorkaroundReason() {
      workaroundReason = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'restricted' field.
      * @return The value.
      */
    public java.lang.CharSequence getRestricted() {
      return restricted;
    }


    /**
      * Sets the value of the 'restricted' field.
      * @param value The value of 'restricted'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setRestricted(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.restricted = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'restricted' field has been set.
      * @return True if the 'restricted' field has been set, false otherwise.
      */
    public boolean hasRestricted() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'restricted' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearRestricted() {
      restricted = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'postalCodeMandatory' field.
      * @return The value.
      */
    public java.lang.CharSequence getPostalCodeMandatory() {
      return postalCodeMandatory;
    }


    /**
      * Sets the value of the 'postalCodeMandatory' field.
      * @param value The value of 'postalCodeMandatory'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setPostalCodeMandatory(java.lang.CharSequence value) {
      validate(fields()[17], value);
      this.postalCodeMandatory = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'postalCodeMandatory' field has been set.
      * @return True if the 'postalCodeMandatory' field has been set, false otherwise.
      */
    public boolean hasPostalCodeMandatory() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'postalCodeMandatory' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearPostalCodeMandatory() {
      postalCodeMandatory = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'stateProvienceMandatory' field.
      * @return The value.
      */
    public java.lang.CharSequence getStateProvienceMandatory() {
      return stateProvienceMandatory;
    }


    /**
      * Sets the value of the 'stateProvienceMandatory' field.
      * @param value The value of 'stateProvienceMandatory'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setStateProvienceMandatory(java.lang.CharSequence value) {
      validate(fields()[18], value);
      this.stateProvienceMandatory = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'stateProvienceMandatory' field has been set.
      * @return True if the 'stateProvienceMandatory' field has been set, false otherwise.
      */
    public boolean hasStateProvienceMandatory() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'stateProvienceMandatory' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearStateProvienceMandatory() {
      stateProvienceMandatory = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'dialingCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getDialingCode() {
      return dialingCode;
    }


    /**
      * Sets the value of the 'dialingCode' field.
      * @param value The value of 'dialingCode'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setDialingCode(java.lang.CharSequence value) {
      validate(fields()[19], value);
      this.dialingCode = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'dialingCode' field has been set.
      * @return True if the 'dialingCode' field has been set, false otherwise.
      */
    public boolean hasDialingCode() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'dialingCode' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearDialingCode() {
      dialingCode = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'dialingCodeDescription' field.
      * @return The value.
      */
    public java.lang.CharSequence getDialingCodeDescription() {
      return dialingCodeDescription;
    }


    /**
      * Sets the value of the 'dialingCodeDescription' field.
      * @param value The value of 'dialingCodeDescription'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setDialingCodeDescription(java.lang.CharSequence value) {
      validate(fields()[20], value);
      this.dialingCodeDescription = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'dialingCodeDescription' field has been set.
      * @return True if the 'dialingCodeDescription' field has been set, false otherwise.
      */
    public boolean hasDialingCodeDescription() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'dialingCodeDescription' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearDialingCodeDescription() {
      dialingCodeDescription = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'portFlag' field.
      * @return The value.
      */
    public boolean getPortFlag() {
      return portFlag;
    }


    /**
      * Sets the value of the 'portFlag' field.
      * @param value The value of 'portFlag'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setPortFlag(boolean value) {
      validate(fields()[21], value);
      this.portFlag = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'portFlag' field has been set.
      * @return True if the 'portFlag' field has been set, false otherwise.
      */
    public boolean hasPortFlag() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'portFlag' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearPortFlag() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'olsonTimezone' field.
      * @return The value.
      */
    public java.lang.CharSequence getOlsonTimezone() {
      return olsonTimezone;
    }


    /**
      * Sets the value of the 'olsonTimezone' field.
      * @param value The value of 'olsonTimezone'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setOlsonTimezone(java.lang.CharSequence value) {
      validate(fields()[22], value);
      this.olsonTimezone = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'olsonTimezone' field has been set.
      * @return True if the 'olsonTimezone' field has been set, false otherwise.
      */
    public boolean hasOlsonTimezone() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'olsonTimezone' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearOlsonTimezone() {
      olsonTimezone = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'bdaType' field.
      * @return The value.
      */
    public java.lang.CharSequence getBdaType() {
      return bdaType;
    }


    /**
      * Sets the value of the 'bdaType' field.
      * @param value The value of 'bdaType'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setBdaType(java.lang.CharSequence value) {
      validate(fields()[23], value);
      this.bdaType = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'bdaType' field has been set.
      * @return True if the 'bdaType' field has been set, false otherwise.
      */
    public boolean hasBdaType() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'bdaType' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearBdaType() {
      bdaType = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'hsudName' field.
      * @return The value.
      */
    public java.lang.CharSequence getHsudName() {
      return hsudName;
    }


    /**
      * Sets the value of the 'hsudName' field.
      * @param value The value of 'hsudName'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setHsudName(java.lang.CharSequence value) {
      validate(fields()[24], value);
      this.hsudName = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'hsudName' field has been set.
      * @return True if the 'hsudName' field has been set, false otherwise.
      */
    public boolean hasHsudName() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'hsudName' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearHsudName() {
      hsudName = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'alternateNames' field.
      * @return The value.
      */
    public java.util.List<com.maersk.geography.smds.operations.msk.alternateNames> getAlternateNames() {
      return alternateNames;
    }


    /**
      * Sets the value of the 'alternateNames' field.
      * @param value The value of 'alternateNames'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setAlternateNames(java.util.List<com.maersk.geography.smds.operations.msk.alternateNames> value) {
      validate(fields()[25], value);
      this.alternateNames = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'alternateNames' field has been set.
      * @return True if the 'alternateNames' field has been set, false otherwise.
      */
    public boolean hasAlternateNames() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'alternateNames' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearAlternateNames() {
      alternateNames = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'alternateCodes' field.
      * @return The value.
      */
    public java.util.List<com.maersk.geography.smds.operations.msk.alternateCodes> getAlternateCodes() {
      return alternateCodes;
    }


    /**
      * Sets the value of the 'alternateCodes' field.
      * @param value The value of 'alternateCodes'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setAlternateCodes(java.util.List<com.maersk.geography.smds.operations.msk.alternateCodes> value) {
      validate(fields()[26], value);
      this.alternateCodes = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'alternateCodes' field has been set.
      * @return True if the 'alternateCodes' field has been set, false otherwise.
      */
    public boolean hasAlternateCodes() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'alternateCodes' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearAlternateCodes() {
      alternateCodes = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.util.List<com.maersk.geography.smds.operations.msk.country> getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setCountry(java.util.List<com.maersk.geography.smds.operations.msk.country> value) {
      validate(fields()[27], value);
      this.country = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearCountry() {
      country = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'parent' field.
      * @return The value.
      */
    public com.maersk.geography.smds.operations.msk.parent getParent() {
      return parent;
    }


    /**
      * Sets the value of the 'parent' field.
      * @param value The value of 'parent'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setParent(com.maersk.geography.smds.operations.msk.parent value) {
      validate(fields()[28], value);
      this.parentBuilder = null;
      this.parent = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'parent' field has been set.
      * @return True if the 'parent' field has been set, false otherwise.
      */
    public boolean hasParent() {
      return fieldSetFlags()[28];
    }

    /**
     * Gets the Builder instance for the 'parent' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.maersk.geography.smds.operations.msk.parent.Builder getParentBuilder() {
      if (parentBuilder == null) {
        if (hasParent()) {
          setParentBuilder(com.maersk.geography.smds.operations.msk.parent.newBuilder(parent));
        } else {
          setParentBuilder(com.maersk.geography.smds.operations.msk.parent.newBuilder());
        }
      }
      return parentBuilder;
    }

    /**
     * Sets the Builder instance for the 'parent' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.maersk.geography.smds.operations.msk.geography.Builder setParentBuilder(com.maersk.geography.smds.operations.msk.parent.Builder value) {
      clearParent();
      parentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'parent' field has an active Builder instance
     * @return True if the 'parent' field has an active Builder instance
     */
    public boolean hasParentBuilder() {
      return parentBuilder != null;
    }

    /**
      * Clears the value of the 'parent' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearParent() {
      parent = null;
      parentBuilder = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'subCityParent' field.
      * @return The value.
      */
    public java.util.List<com.maersk.geography.smds.operations.msk.subCityParent> getSubCityParent() {
      return subCityParent;
    }


    /**
      * Sets the value of the 'subCityParent' field.
      * @param value The value of 'subCityParent'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setSubCityParent(java.util.List<com.maersk.geography.smds.operations.msk.subCityParent> value) {
      validate(fields()[29], value);
      this.subCityParent = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'subCityParent' field has been set.
      * @return True if the 'subCityParent' field has been set, false otherwise.
      */
    public boolean hasSubCityParent() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'subCityParent' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearSubCityParent() {
      subCityParent = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'bda' field.
      * @return The value.
      */
    public java.util.List<com.maersk.geography.smds.operations.msk.bda> getBda() {
      return bda;
    }


    /**
      * Sets the value of the 'bda' field.
      * @param value The value of 'bda'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setBda(java.util.List<com.maersk.geography.smds.operations.msk.bda> value) {
      validate(fields()[30], value);
      this.bda = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'bda' field has been set.
      * @return True if the 'bda' field has been set, false otherwise.
      */
    public boolean hasBda() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'bda' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearBda() {
      bda = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'bdaLocations' field.
      * @return The value.
      */
    public java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation> getBdaLocations() {
      return bdaLocations;
    }


    /**
      * Sets the value of the 'bdaLocations' field.
      * @param value The value of 'bdaLocations'.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder setBdaLocations(java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation> value) {
      validate(fields()[31], value);
      this.bdaLocations = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'bdaLocations' field has been set.
      * @return True if the 'bdaLocations' field has been set, false otherwise.
      */
    public boolean hasBdaLocations() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'bdaLocations' field.
      * @return This builder.
      */
    public com.maersk.geography.smds.operations.msk.geography.Builder clearBdaLocations() {
      bdaLocations = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public geography build() {
      try {
        geography record = new geography();
        record.geoId = fieldSetFlags()[0] ? this.geoId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.geoType = fieldSetFlags()[1] ? this.geoType : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.status = fieldSetFlags()[3] ? this.status : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.validFrom = fieldSetFlags()[4] ? this.validFrom : (java.time.Instant) defaultValue(fields()[4]);
        record.validTo = fieldSetFlags()[5] ? this.validTo : (java.time.Instant) defaultValue(fields()[5]);
        record.longitude = fieldSetFlags()[6] ? this.longitude : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.latitude = fieldSetFlags()[7] ? this.latitude : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.timeZone = fieldSetFlags()[8] ? this.timeZone : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.daylightSavingTime = fieldSetFlags()[9] ? this.daylightSavingTime : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.utcOffsetMinutes = fieldSetFlags()[10] ? this.utcOffsetMinutes : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.daylightSavingStart = fieldSetFlags()[11] ? this.daylightSavingStart : (java.time.Instant) defaultValue(fields()[11]);
        record.daylightSavingEnd = fieldSetFlags()[12] ? this.daylightSavingEnd : (java.time.Instant) defaultValue(fields()[12]);
        record.daylightSavingShiftMinutes = fieldSetFlags()[13] ? this.daylightSavingShiftMinutes : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.description = fieldSetFlags()[14] ? this.description : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.workaroundReason = fieldSetFlags()[15] ? this.workaroundReason : (java.lang.CharSequence) defaultValue(fields()[15]);
        record.restricted = fieldSetFlags()[16] ? this.restricted : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.postalCodeMandatory = fieldSetFlags()[17] ? this.postalCodeMandatory : (java.lang.CharSequence) defaultValue(fields()[17]);
        record.stateProvienceMandatory = fieldSetFlags()[18] ? this.stateProvienceMandatory : (java.lang.CharSequence) defaultValue(fields()[18]);
        record.dialingCode = fieldSetFlags()[19] ? this.dialingCode : (java.lang.CharSequence) defaultValue(fields()[19]);
        record.dialingCodeDescription = fieldSetFlags()[20] ? this.dialingCodeDescription : (java.lang.CharSequence) defaultValue(fields()[20]);
        record.portFlag = fieldSetFlags()[21] ? this.portFlag : (java.lang.Boolean) defaultValue(fields()[21]);
        record.olsonTimezone = fieldSetFlags()[22] ? this.olsonTimezone : (java.lang.CharSequence) defaultValue(fields()[22]);
        record.bdaType = fieldSetFlags()[23] ? this.bdaType : (java.lang.CharSequence) defaultValue(fields()[23]);
        record.hsudName = fieldSetFlags()[24] ? this.hsudName : (java.lang.CharSequence) defaultValue(fields()[24]);
        record.alternateNames = fieldSetFlags()[25] ? this.alternateNames : (java.util.List<com.maersk.geography.smds.operations.msk.alternateNames>) defaultValue(fields()[25]);
        record.alternateCodes = fieldSetFlags()[26] ? this.alternateCodes : (java.util.List<com.maersk.geography.smds.operations.msk.alternateCodes>) defaultValue(fields()[26]);
        record.country = fieldSetFlags()[27] ? this.country : (java.util.List<com.maersk.geography.smds.operations.msk.country>) defaultValue(fields()[27]);
        if (parentBuilder != null) {
          try {
            record.parent = this.parentBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("parent"));
            throw e;
          }
        } else {
          record.parent = fieldSetFlags()[28] ? this.parent : (com.maersk.geography.smds.operations.msk.parent) defaultValue(fields()[28]);
        }
        record.subCityParent = fieldSetFlags()[29] ? this.subCityParent : (java.util.List<com.maersk.geography.smds.operations.msk.subCityParent>) defaultValue(fields()[29]);
        record.bda = fieldSetFlags()[30] ? this.bda : (java.util.List<com.maersk.geography.smds.operations.msk.bda>) defaultValue(fields()[30]);
        record.bdaLocations = fieldSetFlags()[31] ? this.bdaLocations : (java.util.List<com.maersk.geography.smds.operations.msk.bdaLocation>) defaultValue(fields()[31]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<geography>
    WRITER$ = (org.apache.avro.io.DatumWriter<geography>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<geography>
    READER$ = (org.apache.avro.io.DatumReader<geography>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










